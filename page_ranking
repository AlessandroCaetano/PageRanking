#!/usr/bin/env python3
import os
import json
import requests
import networkx as ntx
import matplotlib.pyplot as plt
from requests.packages.urllib3.exceptions import InsecureRequestWarning

#Disabling insecure warning because of spb certificate problems
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

'''
usage ./page_ranking
'''
def get_repo_issues():
    """
    Make HTTP GET request on Software Publico Gitlab and recover all issues
    on SoftwarePublico/SoftwarePublico repo
    """
    issues_json = []
    if not os.path.isfile('./issues.json'):
        for page_number in range(1, 9):
            issues_json += requests.get('https://www.softwarepublico.gov.br/gitlab/api/v3/'
                                        +'projects/30/issues?page=' + str(page_number) +
                                        '&per_page=100&private_token=pUvEiwMsSgJ2JU7DGiaf',
                                        verify=False).json()
        with open('issues.json', 'w') as outfile:
            json.dump(issues_json, outfile)
    else:
        with open('issues.json', 'r') as infile:
            issues_json = json.load(infile)
    return issues_json

def get_issues_comments(issue_id):
    """
    Make HTTP GET request on Software Publico Gitlab and recover all commentaries
    from one issue
    """
    comments_json = []
    if not os.path.isfile('./issues_comments/issue_'+str(issue_id)+'_comments.json'):
        comments_json = requests.get('https://www.softwarepublico.gov.br/gitlab/api/v3/'
                                     +'projects/30/issues/'+str(issue_id)+
                                     '/notes?&per_page=100&private_token=pUvEiwMsSgJ2JU7DGiaf',
                                     verify=False).json()
        with open('./issues_comments/issue_'+str(issue_id)+'_comments.json', 'w') as outfile:
            json.dump(comments_json, outfile)
    else:
        with open('./issues_comments/issue_'+str(issue_id)+'_comments.json', 'r') as infile:
            comments_json = json.load(infile)
    return comments_json


def gen_issue_dict():
    """
    Generates a valid dict with issue id as key and issues linked as value
    """
    issues = get_repo_issues()
    for issue in issues:
        get_issues_comments(issue['id'])

def gen_graph():
    """
    Generates networkx valid DAG based on the issues dictionary
    """
    return 0

def run_pagerank():
    """
    Runs pagerank on all SoftwarePublico/SoftwarePublico issues
    """
    return 0

gen_issue_dict()
